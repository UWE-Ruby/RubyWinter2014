
Please Read Chapters 23 and 24 DuckTyping and MetaProgramming

Questions:
1. What is method_missing and how can it be used?

method_missing is a method of class Object which is called if no other method
can be found by the name called. It raises an exception. It can be usefully 
used by overriding it in your class, and:
  Catching methods that match a regex, and generating them on the fly (passing
  the mismatches on up the line to Object.method_missing). This is how the 
  Rails find_by_.* is implemented. 
  
  (as per [1]:) Using it in a wrapper class to decide which methods can proceed
  'even though we said no'. (I like Perrota's example, but am not sure I can
  think of my own usage scenario yet.)

2. What is and Eigenclass and what is it used for? Where Do Singleton methods live?

An Eigenclass (syns: ghost class, singleton class, metaclass [2]) is a class
which Ruby automagically generates to hold any singleton methods of an object.
It is the class of the object, and a subclass of the object's original
superclass. In other words, Ruby inserts an Eigenclass in the class hierarchy
between an object and it's superclass whenever a singleton method is generated.
#FIXME what are they used for? 

Singleton methods live within the Eigenclass - they are defined for a single
object, rather than for an entire class, and Ruby hoists them up into the
Eigenclass. (Though classes are a sort of object, so it seems to me that class
methods should be viewed as the special case here.) 

3. When would you use DuckTypeing? How would you use it to improve your code?

I would use it implicitly everywhere in Ruby or Python. Consciously using it
would improve my code by:
  Removing superfluous code for checking types where it doesn't matter

  Making my code extensible or modifiable by not wiring down types

4. What is the difference between a class method and an instance method? What is the difference between instance_eval and class_eval?

A class method is available on the class itself. (Singh says a class method is
a singleton method of the class, so they live in the Eigenclass of the
class.[2]) An instance method is available to instances of the class. So:
  class Myclass
    def self.my_class_method
    end

    def my_instance_method
    end
  end

  Myclass.my_class_method
  m = Myclass.new
  m.my_instance_method

#FIXME So what?

#FIXME diff the evals

5. What is the difference between a singleton class and a singleton method?

This question is question 2 turned inside out? 

A singleton method is a method defined for one object. A singleton class (aka
Eigenclass, anonymous class, ghost class, metaclass) is the container class 
generated by ruby to be a superclass of the object to which the singleton
method is attached, thus allowing Ruby to keep it's tidy method look-up 
techniques in order.

[1] http://rubylearning.com/blog/2010/10/07/do-you-know-rubys-chainsaw-method/
[2] http://madebydna.com/all/code/2011/06/24/eigenclasses-demystified.html
