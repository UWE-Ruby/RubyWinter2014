
Please Read Chapters 23 and 24 DuckTyping and MetaProgramming

Questions:
1. What is method_missing and how can it be used?
method_missing is a ruby method located in BasicClass. A method call will look for a method in the object's class, then it's super class, and so on until it reaches BasicObject if the method is not found beforehand, which simply raises one of two exceptions. Therefore method_missing can be overridden to 1) handle all calls to undefined methods, or 2) handle some pre_defined calls to an unknown method and pass others onward to the superclass. Defining a method_missing could be used to simulate accessors though it often is not worth the trouble. More often it is used as a filter and has powerful subtleties (especially in Rails).
2. What is and Eigenclass and what is it used for? Where Do Singleton methods live?
An Eigenclass is an anonymous class created when singleton methods are utilized. The original class becomes the superclass to this new anonymous class which ensures the normal method lookup pattern for the instance is unaltered.
3. When would you use DuckTypeing? How would you use it to improve your code?
DuckTypeing is the general lack of static typing that is found in Java (which is the last class that I took!). At first it seems like it could create problems, but people gravitate towards a certain style of coding and type safety is more illusionary than it might've otherwise been before just trying it out. In Ruby the class is almost never the type. This can have multiple benefits to writing and changing code to be more dynamic. For example a class of an object does not need to be tested and you don't need to check types of arguments.
4. What is the difference between a class method and an instance method? What is the difference between instance_eval and class_eval?
An instance method is called on the instance of a class whereas class methods are called on the class (i.e., no "new" instance of the class is necessary). Class_eval is a method of the module class and it evaluates inside the context of the class whereas instance_eval is a method of the Object class which evaluates within the context of a specific object. SO (somewhat confusingly), class_eval will create instance methods and instance_eval will create class methods.
5. What is the difference between a singleton class and a singleton method?
A singleton method is a method added to only a single instance. After researching quite a bit I sort of feel like a singleton class and methods are describing substantially similar code or concepts, to the point this actually may be a trick question (currently hopeful on this theory, but more likely I am missing something).