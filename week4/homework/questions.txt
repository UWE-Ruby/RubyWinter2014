Please Read: 
Chapter 10 Basic Input and Output
The Rake Gem: http://rake.rubyforge.org/

1. How does Ruby read files?
With File IO objects. Practically, you can mostly do
> while line = gets
but there is also explicit 
> to_be_read = File.new("readme", "r")
or, more idiomatically
> File.open("readme", "r") { |file| <code> }

2. How would you output "Hello World!" to a file called my_output.txt?
Very casually: 
> File.open("my_output.txt", "a"){|file| file.puts "Hello World!"}
Very very casually, and maybe not so portably (though `sokay across *nix and 
Windows):
> `echo "Hello World!" >>my_output.txt`

3. What is the Directory class and what is it used for?
I have no idea. I can't find such a class.

The Dir class, though, is a class of directories, and gives us nice *nixy stuff
like .pwd, .home, and .entries (which I would like to see aliased as 'ls'). Is
this what you were looking for? It seems fitting with IO.

4. What is an IO object?
An object representing something outside of your program that you can use as 
a sink or source for data. Files, stdin, stdout, stderr, sockets, FIFOs, and
I'm not sure what else would all be represented as IO objects of some sort. 
Here is a bit where I am still thinking shell is nicer than ruby, because - 
well, see my shell out in question 2.

5. What is rake and what is it used for? What is a rake task?
A replacement for Makefiles, supposedly with cleaner syntax. I'll get back to
you on this one. A task is the rake equivalent of a target: something which 
we can request be accomplished, which rake will use logic programming to 
determine what prerequisites must be fulfilled in order to accomplish. Is 
'default' always the default task, or is it like make where the first target
is the default target? I've been using make to run tests, so I'll commit
my Makefile and add a rakefile and compare the two.

OK, the rakefile looks a bit ugly.

In ../rake-v-make/ are comparable rake and make files, based on the rake intro
in pickaxe, plus tasks to compare, and to generate dummy files.

$ time make fake default compare
...
real    0m0.013s
user    0m0.005s
sys     0m0.008s

$ time rake fake default compare
...
real    0m0.109s
user    0m0.094s
sys     0m0.013s
This is all too fast to worry about, but the difference in speeds is shocking.
I wonder what big builds end up looking like.

rake is 37 SLOC vs make's 18
I'm sure a more experienced rubyist could shorten that up at least a few
lines. Also, the 5 desc lines aren't necessary - but neither are the 2 lines
providing 'make help'

make uses shell utilities, so you get stuff like wc(1) for free, instead of
re-implementing in ruby.

Contrariwise, make uses shell utilities, so you can't be sure it will run the
same (or at all) on all platforms. I wanted to use seq(1) in the Makefile, but
that isn't in *BSD base (and when it is ported, it's called gseq). Rake uses
1.upto, and if you're running rake you have .upto. 

rake is a hell of a lot more readable than make, even for a seasoned maker /
noob rubyist like me.

